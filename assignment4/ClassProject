<?php
class Project {
    private $db;

    public function __construct($conn) {
        $this->db = $conn;
    }

    // جلب قائمة الطلاب
    public function getStudents() {
        $sql = "SELECT username FROM users WHERE role = 'student'";
        $stmt = $this->db->query($sql);
        return $stmt->fetchAll(PDO::FETCH_COLUMN);
    }

    // جلب قائمة المشرفين
    public function getSupervisors() {
        $sql = "SELECT username FROM users WHERE role = 'supervisor'";
        $stmt = $this->db->query($sql);
        return $stmt->fetchAll(PDO::FETCH_COLUMN);
    }

    // إضافة المشروع
    public function addProject($projectData, $teamMembers) {
        try {
            $this->db->beginTransaction();

            $sql = "INSERT INTO projects  (project_id, project_name, start_date, end_date, status, team_leader, supervisor)
                    VALUES (:project_id, :project_name, :start_date, :end_date, :status, :team_leader, :supervisor)";
            $stmt = $this->db->prepare($sql);
            $stmt->execute($projectData);

            $sqlMembers = "INSERT INTO project_members (project_id, member_name) VALUES (:project_id, :member_name)";
            $stmtMembers = $this->db->prepare($sqlMembers);

            foreach ($teamMembers as $member) {
                $stmtMembers->execute(['project_id' => $projectData['project_id'], 'member_name' => $member]);
            }

            $this->db->commit();
            return "تمت إضافة المشروع بنجاح!";
        } catch (Exception $e) {
            $this->db->rollBack();
            return "خطأ أثناء إضافة المشروع: " . $e->getMessage();
        }
    }

    //دالة التحقق اذا كان المشروع موجود مسبقا
    public function isprojectExists($projectId,$projectName){
        $sql="SELECT * FROM projects WHERE project_id=:project_id OR project_name=:project_name";
        $smt=$this->db->prepare($sql);
        $smt->execute(['project_id'=>$projectId, 'project_name'=>$projectName]);
        return $smt->fetch(PDO::FETCH_ASSOC)!==false;
    }
     

    //دالة للبحث عن المشروع

    public function searchProjects($searchQuery) {
        try {
            // تجهيز قيمة البحث لتعمل مع LIKE
            $query = '%' . $searchQuery . '%';
    
            // استعلام SQL للبحث في الحقول
            $sql = "SELECT * FROM projects WHERE project_id LIKE :query OR project_name LIKE :query";
            $stmt = $this->db->prepare($sql);
            $stmt->execute(['query' => $query]);
    
            // إرجاع النتائج كمصفوفة
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // عرض خطأ إذا حدث أي مشكلة
            die("❌ خطأ في البحث: " . $e->getMessage());
        }
    }
    
    //دالة حذف مشروع 
    public function deleteProjectById($projectid) {
        try {
            // التحقق مما إذا كان المشروع موجودًا قبل الحذف
            $checkSql = "SELECT COUNT(*) FROM projects WHERE project_id = :project_id";
            $checkStmt = $this->db->prepare($checkSql);
            $checkStmt->execute(['project_id' => $projectid]);
    
            if ($checkStmt->fetchColumn() == 0) {
                return "❌ المشروع غير موجود في قاعدة البيانات!";
            }
    
            // تنفيذ عملية الحذف
            $sql = "DELETE FROM projects WHERE project_id = :project_id";
            $stmt = $this->db->prepare($sql);
            $stmt->execute(['project_id' => $projectid]);
    
            return "✅ تم حذف المشروع بنجاح!";
        } catch (PDOException $e) {
            return "❌ خطأ أثناء الحذف: " . $e->getMessage();
        }
    }

    public function getProjectById($projectId) {
        $sql = "SELECT * FROM projects WHERE project_id = :project_id";
        $stmt = $this->db->prepare($sql);
        $stmt->execute(['project_id' => $projectId]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    

    //تحديث بيانات مشروع 
    public function updateProject($projectData, $teamMembers) {
        try {
            $this->db->beginTransaction();
    
            // تحديث بيانات المشروع
            $sql = "UPDATE projects SET 
                    project_name = :project_name, 
                    start_date = :start_date, 
                    end_date = :end_date, 
                    status = :status, 
                    team_leader = :team_leader, 
                    supervisor = :supervisor 
                    WHERE project_id = :project_id";
            $stmt = $this->db->prepare($sql);
            $stmt->execute($projectData);
    
            // حذف الأعضاء القدامى وإعادة إدخال الأعضاء الجدد
            $deleteMembersSQL = "DELETE FROM project_members WHERE project_id = :project_id";
            $deleteStmt = $this->db->prepare($deleteMembersSQL);
            $deleteStmt->execute(['project_id' => $projectData['project_id']]);
    
            $sqlMembers = "INSERT INTO project_members (project_id, member_name) VALUES (:project_id, :member_name)";
            $stmtMembers = $this->db->prepare($sqlMembers);
            foreach ($teamMembers as $member) {
                $stmtMembers->execute(['project_id' => $projectData['project_id'], 'member_name' => $member]);
            }
    
            $this->db->commit();
            return "✅ تم تحديث المشروع بنجاح!";
        } catch (Exception $e) {
            $this->db->rollBack();
            return "❌ خطأ أثناء التحديث: " . $e->getMessage();
        }
    }
    

    }


?>
